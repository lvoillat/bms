% Autogenerated file: Mon Apr 19 14:40:39 2021
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('D:\Projects\BMS\P006n\08_Work_in_progress\Repo_Sync_folder\HiLCAN\BMShil_r2015.2_64_oe_2.8.0_r2019_1_ert\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;




skippedParameters = [];
      checkDataGraphicalNames(codeInfo.Parameters(1).GraphicalName, 'BMSc_airTemperature');


    
    % Setting Parameter#1's implementation  
    codeInfo.Parameters(1).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(2).GraphicalName, 'SOCc_CapacityFilterCoeff');


    
    % Setting Parameter#2's implementation  
    codeInfo.Parameters(2).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(3).GraphicalName, 'SOCv_InitalSOC');


    
    % Setting Parameter#3's implementation  
    codeInfo.Parameters(3).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(4).GraphicalName, 'SOCv_factoryInitSohC');


    
    % Setting Parameter#4's implementation  
    codeInfo.Parameters(4).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(5).GraphicalName, 'bmsc_CellMaxVolt');


    
    % Setting Parameter#5's implementation  
    codeInfo.Parameters(5).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(6).GraphicalName, 'bmsc_CellMinVolt');


    
    % Setting Parameter#6's implementation  
    codeInfo.Parameters(6).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(7).GraphicalName, 'bmsc_NumberInPara');


    
    % Setting Parameter#7's implementation  
    codeInfo.Parameters(7).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(8).GraphicalName, 'bmsc_NumberInSeries');


    
    % Setting Parameter#8's implementation  
    codeInfo.Parameters(8).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(9).GraphicalName, 'btcc_Ki');


    
    % Setting Parameter#9's implementation  
    codeInfo.Parameters(9).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(10).GraphicalName, 'btcc_Kp');


    
    % Setting Parameter#10's implementation  
    codeInfo.Parameters(10).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(11).GraphicalName, 'btcc_ambient_temp_highth');


    
    % Setting Parameter#11's implementation  
    codeInfo.Parameters(11).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(12).GraphicalName, 'btcc_ambient_temp_lowth');


    
    % Setting Parameter#12's implementation  
    codeInfo.Parameters(12).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(13).GraphicalName, 'btcc_cell_temp_diffth');


    
    % Setting Parameter#13's implementation  
    codeInfo.Parameters(13).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(14).GraphicalName, 'btcc_full_soc');


    
    % Setting Parameter#14's implementation  
    codeInfo.Parameters(14).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(15).GraphicalName, 'btcc_max_temp_highth');


    
    % Setting Parameter#15's implementation  
    codeInfo.Parameters(15).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(16).GraphicalName, 'btcc_max_temp_lowth');


    
    % Setting Parameter#16's implementation  
    codeInfo.Parameters(16).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(17).GraphicalName, 'btcc_min_temp_highth');


    
    % Setting Parameter#17's implementation  
    codeInfo.Parameters(17).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(18).GraphicalName, 'btcc_min_temp_lowth');


    
    % Setting Parameter#18's implementation  
    codeInfo.Parameters(18).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(19).GraphicalName, 'btcc_number_in_series');


    
    % Setting Parameter#19's implementation  
    codeInfo.Parameters(19).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(20).GraphicalName, 'btcc_pack_in_parallel');


    
    % Setting Parameter#20's implementation  
    codeInfo.Parameters(20).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(21).GraphicalName, 'cblc_battChargingMode');


    
    % Setting Parameter#21's implementation  
    codeInfo.Parameters(21).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(22).GraphicalName, 'cblc_deltaSocThreshBalance');


    
    % Setting Parameter#22's implementation  
    codeInfo.Parameters(22).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(23).GraphicalName, 'cblc_socThreshBalance');


    
    % Setting Parameter#23's implementation  
    codeInfo.Parameters(23).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(24).GraphicalName, 'sohc_current_threshold');


    
    % Setting Parameter#24's implementation  
    codeInfo.Parameters(24).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(25).GraphicalName, 'sohc_customer_filter_coeff');


    
    % Setting Parameter#25's implementation  
    codeInfo.Parameters(25).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(26).GraphicalName, 'sohc_filter_coeff');


    
    % Setting Parameter#26's implementation  
    codeInfo.Parameters(26).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(27).GraphicalName, 'sohc_pct_R_limit');


    
    % Setting Parameter#27's implementation  
    codeInfo.Parameters(27).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(28).GraphicalName, 'sohv_factoryInit_sohc');


    
    % Setting Parameter#28's implementation  
    codeInfo.Parameters(28).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(29).GraphicalName, 'sohv_factoryInit_sohr');


    
    % Setting Parameter#29's implementation  
    codeInfo.Parameters(29).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(30).GraphicalName, 'sopc_ChargeDerate');


    
    % Setting Parameter#30's implementation  
    codeInfo.Parameters(30).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(31).GraphicalName, 'sopc_ChgFaultDerate');


    
    % Setting Parameter#31's implementation  
    codeInfo.Parameters(31).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(32).GraphicalName, 'sopc_DischargeDerate');


    
    % Setting Parameter#32's implementation  
    codeInfo.Parameters(32).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(33).GraphicalName, 'sopc_DischgFaultDerate');


    
    % Setting Parameter#33's implementation  
    codeInfo.Parameters(33).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(34).GraphicalName, 'vitc_CellPackVolTol');


    
    % Setting Parameter#34's implementation  
    codeInfo.Parameters(34).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(35).GraphicalName, 'vitc_CellTempFaultTimer');


    
    % Setting Parameter#35's implementation  
    codeInfo.Parameters(35).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(36).GraphicalName, 'vitc_CellTempFilterC');


    
    % Setting Parameter#36's implementation  
    codeInfo.Parameters(36).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(37).GraphicalName, 'vitc_CellTempMax');


    
    % Setting Parameter#37's implementation  
    codeInfo.Parameters(37).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(38).GraphicalName, 'vitc_CellTempMin');


    
    % Setting Parameter#38's implementation  
    codeInfo.Parameters(38).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(39).GraphicalName, 'vitc_CellVolFilterC');


    
    % Setting Parameter#39's implementation  
    codeInfo.Parameters(39).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(40).GraphicalName, 'vitc_CellVoltageFaultTimer');


    
    % Setting Parameter#40's implementation  
    codeInfo.Parameters(40).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(41).GraphicalName, 'vitc_CellVoltageMax');


    
    % Setting Parameter#41's implementation  
    codeInfo.Parameters(41).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(42).GraphicalName, 'vitc_CellVoltageMin');


    
    % Setting Parameter#42's implementation  
    codeInfo.Parameters(42).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(43).GraphicalName, 'vitc_CoolantInletTLowerLim');


    
    % Setting Parameter#43's implementation  
    codeInfo.Parameters(43).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(44).GraphicalName, 'vitc_CoolantInletTUpperLim');


    
    % Setting Parameter#44's implementation  
    codeInfo.Parameters(44).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(45).GraphicalName, 'vitc_CoolantOutletTLowerLim');


    
    % Setting Parameter#45's implementation  
    codeInfo.Parameters(45).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(46).GraphicalName, 'vitc_CoolantOutletTUpperLim');


    
    % Setting Parameter#46's implementation  
    codeInfo.Parameters(46).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(47).GraphicalName, 'vitc_CoolantTFilterC');


    
    % Setting Parameter#47's implementation  
    codeInfo.Parameters(47).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(48).GraphicalName, 'vitc_CoolantTempFaultCounter');


    
    % Setting Parameter#48's implementation  
    codeInfo.Parameters(48).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(49).GraphicalName, 'vitc_HVILFaultCounter');


    
    % Setting Parameter#49's implementation  
    codeInfo.Parameters(49).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(50).GraphicalName, 'vitc_PackCurFilterC');


    
    % Setting Parameter#50's implementation  
    codeInfo.Parameters(50).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(51).GraphicalName, 'vitc_PackCurrentFaultTimer');


    
    % Setting Parameter#51's implementation  
    codeInfo.Parameters(51).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(52).GraphicalName, 'vitc_PackCurrentLimit');


    
    % Setting Parameter#52's implementation  
    codeInfo.Parameters(52).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(53).GraphicalName, 'vitc_PackVolFilterC');


    
    % Setting Parameter#53's implementation  
    codeInfo.Parameters(53).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(54).GraphicalName, 'vitc_PackVoltageFaultTimer');


    
    % Setting Parameter#54's implementation  
    codeInfo.Parameters(54).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(55).GraphicalName, 'vitc_VehVolFilterC');


    
    % Setting Parameter#55's implementation  
    codeInfo.Parameters(55).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(56).GraphicalName, 'bscv_LowFaultType');


    
    % Setting Parameter#56's implementation  
    codeInfo.Parameters(56).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(57).GraphicalName, 'bscv_MediumFaultType');


    
    % Setting Parameter#57's implementation  
    codeInfo.Parameters(57).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(58).GraphicalName, 'bscv_SevereFaultType');


    
    % Setting Parameter#58's implementation  
    codeInfo.Parameters(58).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(59).GraphicalName, 'vitc_CellTempHighFaultReset');


    
    % Setting Parameter#59's implementation  
    codeInfo.Parameters(59).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(60).GraphicalName, 'vitc_CellTempLowFaultReset');


    
    % Setting Parameter#60's implementation  
    codeInfo.Parameters(60).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(61).GraphicalName, 'vitc_CellVoltageHighFaultReset');


    
    % Setting Parameter#61's implementation  
    codeInfo.Parameters(61).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(62).GraphicalName, 'vitc_CellVoltageLowFaultReset');


    
    % Setting Parameter#62's implementation  
    codeInfo.Parameters(62).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(63).GraphicalName, 'vitc_CoolantInletTFaultReset');


    
    % Setting Parameter#63's implementation  
    codeInfo.Parameters(63).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(64).GraphicalName, 'vitc_CoolantOutletTFaultReset');


    
    % Setting Parameter#64's implementation  
    codeInfo.Parameters(64).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(65).GraphicalName, 'vitc_HVILFaultReset');


    
    % Setting Parameter#65's implementation  
    codeInfo.Parameters(65).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(66).GraphicalName, 'vitc_PackCurrentFaultReset');


    
    % Setting Parameter#66's implementation  
    codeInfo.Parameters(66).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(67).GraphicalName, 'vitc_PackVoltageFaultReset');


    
    % Setting Parameter#67's implementation  
    codeInfo.Parameters(67).Implementation = [];

  tmpParams = [];
if ~isempty(tmpParams)
codeInfo.Parameters = [codeInfo.Parameters; tmpParams];
end

    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  

  Initialize_Prototype = RTW.CImplementation;
  Initialize_Prototype.Arguments  = tmpArgs;
  Initialize_Prototype.Return     = tmpRet;
    Initialize_Prototype.HeaderFile = ['BMShil', '.h'];
  Initialize_Prototype.SourceFile = ['BMShil', '.c'];

  Initialize_Interface = RTW.FunctionInterface;
  Initialize_Interface.Prototype    = Initialize_Prototype;
  Initialize_Interface.ActualArgs   = tmpActualArgs;
  Initialize_Interface.ActualReturn = tmpActualReturn;

      Initialize_Prototype.Name = 'BMShil_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions; Initialize_Interface'];

          tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  

  OutputUpdate_Prototype = RTW.CImplementation;
  OutputUpdate_Prototype.Arguments  = tmpArgs;
  OutputUpdate_Prototype.Return     = tmpRet;
    OutputUpdate_Prototype.HeaderFile = ['BMShil', '.h'];
  OutputUpdate_Prototype.SourceFile = ['BMShil', '.c'];

  OutputUpdate_Interface = RTW.FunctionInterface;
  OutputUpdate_Interface.Prototype    = OutputUpdate_Prototype;
  OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate_Prototype.Name = 'BMShil_step';
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      OutputUpdate_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate_Interface'];


  


if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end


% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

  lookupTableArray = [];         
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports lookupTableArray;
  else
    save codeInfo.mat codeInfo lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = find(iDataVec, 'GraphicalName', iDataName);
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = [];
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    
   
