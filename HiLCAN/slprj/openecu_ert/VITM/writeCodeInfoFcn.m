% Autogenerated file: Wed Apr 14 09:38:00 2021
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('D:\Projects\BMS\P006n\08_Work_in_progress\Repo_Sync_folder\HiLCAN\slprj\openecu_ert\VITM\tmwinternal\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;



          
% Built-In Type: 0
Type_0_R0_V0 = numerictype('double');
  Type_0_R0_V0.Name = 'double';
  Type_0_R0_V0.Identifier = 'real_T';
  Type_0_R0_V0.ReadOnly   = 0;
  Type_0_R0_V0.Volatile   = 0;
        
% Variable: Var_EO0
Var_EO0 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsMaxTemperature');
    Var_EO0.Owner           = '';
    Var_EO0.DeclarationFile = '';
    
        
    % Setting Outport#1's Implementation    
    codeInfo.Outports(1).Implementation = Var_EO0;
    
% Variable: Var_EO1
Var_EO1 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsMinTemperature');
    Var_EO1.Owner           = '';
    Var_EO1.DeclarationFile = '';
    
        
    % Setting Outport#2's Implementation    
    codeInfo.Outports(2).Implementation = Var_EO1;
    
% Variable: Var_EO2
Var_EO2 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsAvgTemperature');
    Var_EO2.Owner           = '';
    Var_EO2.DeclarationFile = '';
    
        
    % Setting Outport#3's Implementation    
    codeInfo.Outports(3).Implementation = Var_EO2;
          
% Built-In Type: 3
Type_3_R0_V0 = numerictype(0, 8, 0);
  Type_3_R0_V0.Name = 'uint8';
  Type_3_R0_V0.Identifier = 'uint8_T';
  Type_3_R0_V0.ReadOnly   = 0;
  Type_3_R0_V0.Volatile   = 0;
        
% Variable: Var_EO3
Var_EO3 = RTW.Variable(Type_3_R0_V0, 'vitm_CellsTemperatureLowFault');
    Var_EO3.Owner           = '';
    Var_EO3.DeclarationFile = '';
    
        
    % Setting Outport#4's Implementation    
    codeInfo.Outports(4).Implementation = Var_EO3;
    
% Variable: Var_EO4
Var_EO4 = RTW.Variable(Type_3_R0_V0, 'vitm_CellsTemperatureHighFault');
    Var_EO4.Owner           = '';
    Var_EO4.DeclarationFile = '';
    
        
    % Setting Outport#5's Implementation    
    codeInfo.Outports(5).Implementation = Var_EO4;
    
% Variable: Var_EO5
Var_EO5 = RTW.Variable(Type_3_R0_V0, 'vitm_CellsVoltageLowFault');
    Var_EO5.Owner           = '';
    Var_EO5.DeclarationFile = '';
    
        
    % Setting Outport#6's Implementation    
    codeInfo.Outports(6).Implementation = Var_EO5;
    
% Variable: Var_EO6
Var_EO6 = RTW.Variable(Type_3_R0_V0, 'vitm_CellsVoltageHighFault');
    Var_EO6.Owner           = '';
    Var_EO6.DeclarationFile = '';
    
        
    % Setting Outport#7's Implementation    
    codeInfo.Outports(7).Implementation = Var_EO6;
    
% Variable: Var_EO7
Var_EO7 = RTW.Variable(Type_3_R0_V0, 'vitm_PackVoltageFault');
    Var_EO7.Owner           = '';
    Var_EO7.DeclarationFile = '';
    
        
    % Setting Outport#8's Implementation    
    codeInfo.Outports(8).Implementation = Var_EO7;
    
% Variable: Var_EO8
Var_EO8 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsMinVoltage');
    Var_EO8.Owner           = '';
    Var_EO8.DeclarationFile = '';
    
        
    % Setting Outport#9's Implementation    
    codeInfo.Outports(9).Implementation = Var_EO8;
    
% Variable: Var_EO9
Var_EO9 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsMaxVoltage');
    Var_EO9.Owner           = '';
    Var_EO9.DeclarationFile = '';
    
        
    % Setting Outport#10's Implementation    
    codeInfo.Outports(10).Implementation = Var_EO9;
    
% Variable: Var_EO10
Var_EO10 = RTW.Variable(Type_0_R0_V0, 'vitm_CellsAvgVoltage');
    Var_EO10.Owner           = '';
    Var_EO10.DeclarationFile = '';
    
        
    % Setting Outport#11's Implementation    
    codeInfo.Outports(11).Implementation = Var_EO10;
    
% Variable: Var_EO11
Var_EO11 = RTW.Variable(Type_0_R0_V0, 'vitm_PackVoltageFiltered');
    Var_EO11.Owner           = '';
    Var_EO11.DeclarationFile = '';
    
        
    % Setting Outport#12's Implementation    
    codeInfo.Outports(12).Implementation = Var_EO11;
    
% Variable: Var_EO12
Var_EO12 = RTW.Variable(Type_0_R0_V0, 'vitm_PackCurrentFiltered');
    Var_EO12.Owner           = '';
    Var_EO12.DeclarationFile = '';
    
        
    % Setting Outport#13's Implementation    
    codeInfo.Outports(13).Implementation = Var_EO12;
    
% Variable: Var_EO13
Var_EO13 = RTW.Variable(Type_3_R0_V0, 'vitm_PackCurrentFault');
    Var_EO13.Owner           = '';
    Var_EO13.DeclarationFile = '';
    
        
    % Setting Outport#14's Implementation    
    codeInfo.Outports(14).Implementation = Var_EO13;
    
% Variable: Var_EO14
Var_EO14 = RTW.Variable(Type_0_R0_V0, 'vitm_CoolantDeltaTemp');
    Var_EO14.Owner           = '';
    Var_EO14.DeclarationFile = '';
    
        
    % Setting Outport#15's Implementation    
    codeInfo.Outports(15).Implementation = Var_EO14;
    
% Variable: Var_EO15
Var_EO15 = RTW.Variable(Type_3_R0_V0, 'vitm_CoolantInletTempFault');
    Var_EO15.Owner           = '';
    Var_EO15.DeclarationFile = '';
    
        
    % Setting Outport#16's Implementation    
    codeInfo.Outports(16).Implementation = Var_EO15;
    
% Variable: Var_EO16
Var_EO16 = RTW.Variable(Type_3_R0_V0, 'vitm_CoolantOutlletTempFault');
    Var_EO16.Owner           = '';
    Var_EO16.DeclarationFile = '';
    
        
    % Setting Outport#17's Implementation    
    codeInfo.Outports(17).Implementation = Var_EO16;
    
% Variable: Var_EO17
Var_EO17 = RTW.Variable(Type_0_R0_V0, 'vitm_CoolantInletTFiltered');
    Var_EO17.Owner           = '';
    Var_EO17.DeclarationFile = '';
    
        
    % Setting Outport#18's Implementation    
    codeInfo.Outports(18).Implementation = Var_EO17;
    
% Variable: Var_EO18
Var_EO18 = RTW.Variable(Type_0_R0_V0, 'vitm_CoolantOutletTFiltered');
    Var_EO18.Owner           = '';
    Var_EO18.DeclarationFile = '';
    
        
    % Setting Outport#19's Implementation    
    codeInfo.Outports(19).Implementation = Var_EO18;
    
% Variable: Var_EO19
Var_EO19 = RTW.Variable(Type_3_R0_V0, 'vitm_HVILFault');
    Var_EO19.Owner           = '';
    Var_EO19.DeclarationFile = '';
    
        
    % Setting Outport#20's Implementation    
    codeInfo.Outports(20).Implementation = Var_EO19;
      
  % Matrix Type
  Type_17_R0_V0 = embedded.matrixtype;
  Type_17_R0_V0.BaseType   = Type_0_R0_V0;
    Type_17_R0_V0.Dimensions = [40];
        
% Variable: Var_EO20
Var_EO20 = RTW.Variable(Type_17_R0_V0, 'vitm_CellsTemperatureFiltered');
    Var_EO20.Owner           = '';
    Var_EO20.DeclarationFile = '';
    
        
    % Setting Outport#21's Implementation    
    codeInfo.Outports(21).Implementation = Var_EO20;
    
% Variable: Var_EO21
Var_EO21 = RTW.Variable(Type_17_R0_V0, 'vitm_CellsVoltageFiltered');
    Var_EO21.Owner           = '';
    Var_EO21.DeclarationFile = '';
    
        
    % Setting Outport#22's Implementation    
    codeInfo.Outports(22).Implementation = Var_EO21;
    
% Variable: Var_EO22
Var_EO22 = RTW.Variable(Type_0_R0_V0, 'vitm_VehSideVoltageFiltered');
    Var_EO22.Owner           = '';
    Var_EO22.DeclarationFile = '';
    
        
    % Setting Outport#23's Implementation    
    codeInfo.Outports(23).Implementation = Var_EO22;

skippedParameters = [];
      checkDataGraphicalNames(codeInfo.Parameters(1).GraphicalName, 'vitc_CellPackVolTol');


    
    % Setting Parameter#1's implementation  
    codeInfo.Parameters(1).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(2).GraphicalName, 'vitc_CellTempFaultTimer');


    
    % Setting Parameter#2's implementation  
    codeInfo.Parameters(2).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(3).GraphicalName, 'vitc_CellTempFilterC');


    
    % Setting Parameter#3's implementation  
    codeInfo.Parameters(3).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(4).GraphicalName, 'vitc_CellTempMax');


    
    % Setting Parameter#4's implementation  
    codeInfo.Parameters(4).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(5).GraphicalName, 'vitc_CellTempMin');


    
    % Setting Parameter#5's implementation  
    codeInfo.Parameters(5).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(6).GraphicalName, 'vitc_CellVolFilterC');


    
    % Setting Parameter#6's implementation  
    codeInfo.Parameters(6).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(7).GraphicalName, 'vitc_CellVoltageFaultTimer');


    
    % Setting Parameter#7's implementation  
    codeInfo.Parameters(7).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(8).GraphicalName, 'vitc_CellVoltageMax');


    
    % Setting Parameter#8's implementation  
    codeInfo.Parameters(8).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(9).GraphicalName, 'vitc_CellVoltageMin');


    
    % Setting Parameter#9's implementation  
    codeInfo.Parameters(9).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(10).GraphicalName, 'vitc_CoolantInletTLowerLim');


    
    % Setting Parameter#10's implementation  
    codeInfo.Parameters(10).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(11).GraphicalName, 'vitc_CoolantInletTUpperLim');


    
    % Setting Parameter#11's implementation  
    codeInfo.Parameters(11).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(12).GraphicalName, 'vitc_CoolantOutletTLowerLim');


    
    % Setting Parameter#12's implementation  
    codeInfo.Parameters(12).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(13).GraphicalName, 'vitc_CoolantOutletTUpperLim');


    
    % Setting Parameter#13's implementation  
    codeInfo.Parameters(13).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(14).GraphicalName, 'vitc_CoolantTFilterC');


    
    % Setting Parameter#14's implementation  
    codeInfo.Parameters(14).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(15).GraphicalName, 'vitc_CoolantTempFaultCounter');


    
    % Setting Parameter#15's implementation  
    codeInfo.Parameters(15).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(16).GraphicalName, 'vitc_HVILFaultCounter');


    
    % Setting Parameter#16's implementation  
    codeInfo.Parameters(16).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(17).GraphicalName, 'vitc_PackCurFilterC');


    
    % Setting Parameter#17's implementation  
    codeInfo.Parameters(17).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(18).GraphicalName, 'vitc_PackCurrentFaultTimer');


    
    % Setting Parameter#18's implementation  
    codeInfo.Parameters(18).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(19).GraphicalName, 'vitc_PackCurrentLimit');


    
    % Setting Parameter#19's implementation  
    codeInfo.Parameters(19).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(20).GraphicalName, 'vitc_PackVolFilterC');


    
    % Setting Parameter#20's implementation  
    codeInfo.Parameters(20).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(21).GraphicalName, 'vitc_PackVoltageFaultTimer');


    
    % Setting Parameter#21's implementation  
    codeInfo.Parameters(21).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(22).GraphicalName, 'vitc_VehVolFilterC');


    
    % Setting Parameter#22's implementation  
    codeInfo.Parameters(22).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(23).GraphicalName, 'vitc_CellTempHighFaultReset');


    
    % Setting Parameter#23's implementation  
    codeInfo.Parameters(23).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(24).GraphicalName, 'vitc_CellTempLowFaultReset');


    
    % Setting Parameter#24's implementation  
    codeInfo.Parameters(24).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(25).GraphicalName, 'vitc_CellVoltageHighFaultReset');


    
    % Setting Parameter#25's implementation  
    codeInfo.Parameters(25).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(26).GraphicalName, 'vitc_CellVoltageLowFaultReset');


    
    % Setting Parameter#26's implementation  
    codeInfo.Parameters(26).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(27).GraphicalName, 'vitc_CoolantInletTFaultReset');


    
    % Setting Parameter#27's implementation  
    codeInfo.Parameters(27).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(28).GraphicalName, 'vitc_CoolantOutletTFaultReset');


    
    % Setting Parameter#28's implementation  
    codeInfo.Parameters(28).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(29).GraphicalName, 'vitc_HVILFaultReset');


    
    % Setting Parameter#29's implementation  
    codeInfo.Parameters(29).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(30).GraphicalName, 'vitc_PackCurrentFaultReset');


    
    % Setting Parameter#30's implementation  
    codeInfo.Parameters(30).Implementation = [];
      checkDataGraphicalNames(codeInfo.Parameters(31).GraphicalName, 'vitc_PackVoltageFaultReset');


    
    % Setting Parameter#31's implementation  
    codeInfo.Parameters(31).Implementation = [];

  tmpParams = [];
if ~isempty(tmpParams)
codeInfo.Parameters = [codeInfo.Parameters; tmpParams];
end

          
  
  
  
  tmpArgs         = [];           
  tmpActualArgs   = [];           
  tmpRet          = [];           
  tmpActualReturn = [];           
    
      
% Char type    
Type_char_R1_V0 = embedded.chartype;
    Type_char_R1_V0.Identifier = 'char_T';
    Type_char_R1_V0.ReadOnly = 1;
    Type_char_R1_V0.Volatile = 0;
    

% Pointer Type: Pointer to Type_char_R1_V0    
PtrType_char_R1_V0_0_0 = embedded.pointertype;
   PtrType_char_R1_V0_0_0.BaseType = Type_char_R1_V0;
    PtrType_char_R1_V0_0_0.ReadOnly = 0;
    PtrType_char_R1_V0_0_0.Volatile = 0;
    

% Pointer Type: Pointer to PtrType_char_R1_V0_0_0    
PtrPtrType_char_R1_V0_0_0_0_0 = embedded.pointertype;
   PtrPtrType_char_R1_V0_0_0_0_0.BaseType = PtrType_char_R1_V0_0_0;
    PtrPtrType_char_R1_V0_0_0_0_0.ReadOnly = 0;
    PtrPtrType_char_R1_V0_0_0_0_0.Volatile = 0;
    
      Arg_rt_errorStatus = RTW.Argument;
    Arg_rt_errorStatus.Type = PtrPtrType_char_R1_V0_0_0_0_0;
    Arg_rt_errorStatus.Name = 'rt_errorStatus';
    tmpArgs = [tmpArgs; Arg_rt_errorStatus];

      
    
% Variable: Var_rt_errorStatus
Var_rt_errorStatus = RTW.Variable(PtrPtrType_char_R1_V0_0_0_0_0, 'rt_errorStatus');
    Var_rt_errorStatus.Owner           = '';
    Var_rt_errorStatus.DeclarationFile = '';
    
    
% Data Interface: idata_rt_errorStatus
idata_rt_errorStatus = RTW.DataInterface('', 'rt_errorStatus', Var_rt_errorStatus, []);
    
    tmpActualArgs = [tmpActualArgs; idata_rt_errorStatus];


    
    
    
  
    
  
  
    
  
  canParamStartIdx = length(codeInfo.Parameters) - 0 + 1;
  
  
    
    
  
  
  
  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

 
  
  
  
  
  
  
      
% Opaque Data Type
type_RTModel  = embedded.opaquetype('RT_MODEL_VITM');
      

% Pointer Type: Pointer to type_RTModel    
Ptrtype_RTModel_1_0 = embedded.pointertype;
   Ptrtype_RTModel_1_0.BaseType = type_RTModel;
    Ptrtype_RTModel_1_0.ReadOnly = 1;
    Ptrtype_RTModel_1_0.Volatile = 0;
    
    Ptrtype_RTModel_1_0.ReadOnly = 1;
        Arg_rtm = RTW.Argument;
    Arg_rtm.Type = Ptrtype_RTModel_1_0;
    Arg_rtm.Name = 'VITM_M';
    tmpArgs = [tmpArgs; Arg_rtm];

        
    
% Variable: Var_RTModel
Var_RTModel = RTW.Variable(type_RTModel, 'RTModel');
    Var_RTModel.Owner           = '';
    Var_RTModel.DeclarationFile = '';
    
    
% Data Interface: idata_RTModel
idata_RTModel = RTW.DataInterface('', 'RTModel', Var_RTModel, []);
    
    tmpActualArgs = [tmpActualArgs; idata_RTModel];

  
  
  
  
   
          
% Opaque Data Type
type_localZCE  = embedded.opaquetype('rtZCE_VITM');
      

% Pointer Type: Pointer to type_localZCE    
Ptrtype_localZCE_0_0 = embedded.pointertype;
   Ptrtype_localZCE_0_0.BaseType = type_localZCE;
    Ptrtype_localZCE_0_0.ReadOnly = 0;
    Ptrtype_localZCE_0_0.Volatile = 0;
    
        Arg_localZCE = RTW.Argument;
    Arg_localZCE.Type = Ptrtype_localZCE_0_0;
    Arg_localZCE.Name = 'localZCE';
    tmpArgs = [tmpArgs; Arg_localZCE];

        
    
% Variable: Var_localZCE
Var_localZCE = RTW.Variable(type_localZCE, 'localZCE');
    Var_localZCE.Owner           = '';
    Var_localZCE.DeclarationFile = '';
    
    
% Data Interface: idata_localZCE
idata_localZCE = RTW.DataInterface('', 'localZCE', Var_localZCE, []);
    
    tmpActualArgs = [tmpActualArgs; idata_localZCE];



  
  
  
    
  
    RegistrationFcn_Prototype = RTW.CImplementation;   
  RegistrationFcn_Prototype.HeaderFile = ['VITM', '.h'];
    RegistrationFcn_Prototype.SourceFile = ['VITM', '.c'];
  
  RegistrationFcn_Prototype.Name = 'VITM_initialize';
  RegistrationFcn_Prototype.Arguments  = tmpArgs;
  RegistrationFcn_Prototype.Return     = tmpRet;

    RegistrationFcn_Interface = RTW.FunctionInterface;
  
  RegistrationFcn_Interface.Prototype    = RegistrationFcn_Prototype;
  RegistrationFcn_Interface.ActualArgs   = tmpActualArgs;
  RegistrationFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      RegistrationFcn_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions; RegistrationFcn_Interface'];
  

      
      
    
    
    tmpArgs         = [];           
    tmpActualArgs   = [];           
    tmpRet          = [];           
    tmpActualReturn = [];           

    
      
  
  
    
  
    
  
  canParamStartIdx = length(codeInfo.Parameters) - 0 + 1;
  
  
    
    
                              
% Built-In Type: 0
Type_0_R1_V0 = numerictype('double');
  Type_0_R1_V0.Name = 'double';
  Type_0_R1_V0.Identifier = 'real_T';
  Type_0_R1_V0.ReadOnly   = 1;
  Type_0_R1_V0.Volatile   = 0;
    
  % Matrix Type
  Type_17_R1_V0 = embedded.matrixtype;
  Type_17_R1_V0.BaseType   = Type_0_R1_V0;
    Type_17_R1_V0.Dimensions = [40];
        
    
      codeInfo.Inports(1).Implementation.Identifier = ['i_' codeInfo.Inports(1).Implementation.Identifier];
      
        Arg_ci0 = RTW.Argument;
    Arg_ci0.Type = Type_17_R1_V0;
    Arg_ci0.Name = 'rtu_CellVoltages';
    tmpArgs = [tmpArgs; Arg_ci0];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(1)];

              
% Pointer Type: Pointer to Type_0_R1_V0    
PtrType_0_R1_V0_0_0 = embedded.pointertype;
   PtrType_0_R1_V0_0_0.BaseType = Type_0_R1_V0;
    PtrType_0_R1_V0_0_0.ReadOnly = 0;
    PtrType_0_R1_V0_0_0.Volatile = 0;
    
    
    
      codeInfo.Inports(2).Implementation.Identifier = ['i_' codeInfo.Inports(2).Implementation.Identifier];
      
        Arg_ci1 = RTW.Argument;
    Arg_ci1.Type = PtrType_0_R1_V0_0_0;
    Arg_ci1.Name = 'rtu_PackVoltage';
    tmpArgs = [tmpArgs; Arg_ci1];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(2)];

                  
    
      codeInfo.Inports(3).Implementation.Identifier = ['i_' codeInfo.Inports(3).Implementation.Identifier];
      
        Arg_ci2 = RTW.Argument;
    Arg_ci2.Type = PtrType_0_R1_V0_0_0;
    Arg_ci2.Name = 'rtu_VehSideVoltage';
    tmpArgs = [tmpArgs; Arg_ci2];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(3)];

                  
    
      codeInfo.Inports(4).Implementation.Identifier = ['i_' codeInfo.Inports(4).Implementation.Identifier];
      
        Arg_ci3 = RTW.Argument;
    Arg_ci3.Type = PtrType_0_R1_V0_0_0;
    Arg_ci3.Name = 'rtu_PackCurrent';
    tmpArgs = [tmpArgs; Arg_ci3];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(4)];

                  
    
      codeInfo.Inports(5).Implementation.Identifier = ['i_' codeInfo.Inports(5).Implementation.Identifier];
      
        Arg_ci4 = RTW.Argument;
    Arg_ci4.Type = PtrType_0_R1_V0_0_0;
    Arg_ci4.Name = 'rtu_CoolantInletT';
    tmpArgs = [tmpArgs; Arg_ci4];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(5)];

                  
    
      codeInfo.Inports(6).Implementation.Identifier = ['i_' codeInfo.Inports(6).Implementation.Identifier];
      
        Arg_ci5 = RTW.Argument;
    Arg_ci5.Type = PtrType_0_R1_V0_0_0;
    Arg_ci5.Name = 'rtu_CoolantOutletT';
    tmpArgs = [tmpArgs; Arg_ci5];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(6)];

                  
    
      codeInfo.Inports(7).Implementation.Identifier = ['i_' codeInfo.Inports(7).Implementation.Identifier];
      
        Arg_ci6 = RTW.Argument;
    Arg_ci6.Type = Type_17_R1_V0;
    Arg_ci6.Name = 'rtu_CellsTemperature';
    tmpArgs = [tmpArgs; Arg_ci6];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(7)];

                  
    
      codeInfo.Inports(8).Implementation.Identifier = ['i_' codeInfo.Inports(8).Implementation.Identifier];
      
        Arg_ci7 = RTW.Argument;
    Arg_ci7.Type = PtrType_0_R1_V0_0_0;
    Arg_ci7.Name = 'rtu_HVILReturn';
    tmpArgs = [tmpArgs; Arg_ci7];

    tmpActualArgs = [tmpActualArgs; codeInfo.Inports(8)];

                    % Pointer Type: Pointer to 'Type_0_R0_V0'    
Type_21_R0_V0 = embedded.pointertype;
  Type_21_R0_V0.BaseType = Type_0_R0_V0;
  Type_21_R0_V0.ReadOnly = 0; 
  Type_21_R0_V0.Volatile = 0;
        
      codeInfo.Outports(1).Implementation.Identifier = ['o_' codeInfo.Outports(1).Implementation.Identifier];
    
        Arg_co1 = RTW.Argument;
    Arg_co1.Type = Type_21_R0_V0;
    Arg_co1.Name = 'rty_vitm_CellsMaxTemperature';
    tmpArgs = [tmpArgs; Arg_co1];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(1)];

                  
      codeInfo.Outports(2).Implementation.Identifier = ['o_' codeInfo.Outports(2).Implementation.Identifier];
    
        Arg_co2 = RTW.Argument;
    Arg_co2.Type = Type_21_R0_V0;
    Arg_co2.Name = 'rty_vitm_CellsMinTemperature';
    tmpArgs = [tmpArgs; Arg_co2];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(2)];

                  
      codeInfo.Outports(3).Implementation.Identifier = ['o_' codeInfo.Outports(3).Implementation.Identifier];
    
        Arg_co3 = RTW.Argument;
    Arg_co3.Type = Type_21_R0_V0;
    Arg_co3.Name = 'rty_vitm_CellsAvgTemperature';
    tmpArgs = [tmpArgs; Arg_co3];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(3)];

                    % Pointer Type: Pointer to 'Type_3_R0_V0'    
Type_22_R0_V0 = embedded.pointertype;
  Type_22_R0_V0.BaseType = Type_3_R0_V0;
  Type_22_R0_V0.ReadOnly = 0; 
  Type_22_R0_V0.Volatile = 0;
        
      codeInfo.Outports(4).Implementation.Identifier = ['o_' codeInfo.Outports(4).Implementation.Identifier];
    
        Arg_co4 = RTW.Argument;
    Arg_co4.Type = Type_22_R0_V0;
    Arg_co4.Name = 'rty_vitm_CellsTemperatureLowFau';
    tmpArgs = [tmpArgs; Arg_co4];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(4)];

                  
      codeInfo.Outports(5).Implementation.Identifier = ['o_' codeInfo.Outports(5).Implementation.Identifier];
    
        Arg_co5 = RTW.Argument;
    Arg_co5.Type = Type_22_R0_V0;
    Arg_co5.Name = 'rty_vitm_CellsTemperatureHighFa';
    tmpArgs = [tmpArgs; Arg_co5];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(5)];

                  
      codeInfo.Outports(6).Implementation.Identifier = ['o_' codeInfo.Outports(6).Implementation.Identifier];
    
        Arg_co6 = RTW.Argument;
    Arg_co6.Type = Type_22_R0_V0;
    Arg_co6.Name = 'rty_vitm_CellsVoltageLowFault';
    tmpArgs = [tmpArgs; Arg_co6];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(6)];

                  
      codeInfo.Outports(7).Implementation.Identifier = ['o_' codeInfo.Outports(7).Implementation.Identifier];
    
        Arg_co7 = RTW.Argument;
    Arg_co7.Type = Type_22_R0_V0;
    Arg_co7.Name = 'rty_vitm_CellsVoltageHighFault';
    tmpArgs = [tmpArgs; Arg_co7];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(7)];

                  
      codeInfo.Outports(8).Implementation.Identifier = ['o_' codeInfo.Outports(8).Implementation.Identifier];
    
        Arg_co8 = RTW.Argument;
    Arg_co8.Type = Type_22_R0_V0;
    Arg_co8.Name = 'rty_vitm_PackVoltageFault';
    tmpArgs = [tmpArgs; Arg_co8];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(8)];

                  
      codeInfo.Outports(9).Implementation.Identifier = ['o_' codeInfo.Outports(9).Implementation.Identifier];
    
        Arg_co9 = RTW.Argument;
    Arg_co9.Type = Type_21_R0_V0;
    Arg_co9.Name = 'rty_vitm_CellsMinVoltage';
    tmpArgs = [tmpArgs; Arg_co9];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(9)];

                  
      codeInfo.Outports(10).Implementation.Identifier = ['o_' codeInfo.Outports(10).Implementation.Identifier];
    
        Arg_co10 = RTW.Argument;
    Arg_co10.Type = Type_21_R0_V0;
    Arg_co10.Name = 'rty_vitm_CellsMaxVoltage';
    tmpArgs = [tmpArgs; Arg_co10];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(10)];

                  
      codeInfo.Outports(11).Implementation.Identifier = ['o_' codeInfo.Outports(11).Implementation.Identifier];
    
        Arg_co11 = RTW.Argument;
    Arg_co11.Type = Type_21_R0_V0;
    Arg_co11.Name = 'rty_vitm_CellsAvgVoltage';
    tmpArgs = [tmpArgs; Arg_co11];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(11)];

                  
      codeInfo.Outports(12).Implementation.Identifier = ['o_' codeInfo.Outports(12).Implementation.Identifier];
    
        Arg_co12 = RTW.Argument;
    Arg_co12.Type = Type_21_R0_V0;
    Arg_co12.Name = 'rty_vitm_PackVoltageFiltered';
    tmpArgs = [tmpArgs; Arg_co12];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(12)];

                  
      codeInfo.Outports(13).Implementation.Identifier = ['o_' codeInfo.Outports(13).Implementation.Identifier];
    
        Arg_co13 = RTW.Argument;
    Arg_co13.Type = Type_21_R0_V0;
    Arg_co13.Name = 'rty_vitm_PackCurrentFiltered';
    tmpArgs = [tmpArgs; Arg_co13];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(13)];

                  
      codeInfo.Outports(14).Implementation.Identifier = ['o_' codeInfo.Outports(14).Implementation.Identifier];
    
        Arg_co14 = RTW.Argument;
    Arg_co14.Type = Type_22_R0_V0;
    Arg_co14.Name = 'rty_vitm_PackCurrentFault';
    tmpArgs = [tmpArgs; Arg_co14];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(14)];

                  
      codeInfo.Outports(15).Implementation.Identifier = ['o_' codeInfo.Outports(15).Implementation.Identifier];
    
        Arg_co15 = RTW.Argument;
    Arg_co15.Type = Type_21_R0_V0;
    Arg_co15.Name = 'rty_vitm_CoolantDeltaTemp';
    tmpArgs = [tmpArgs; Arg_co15];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(15)];

                  
      codeInfo.Outports(16).Implementation.Identifier = ['o_' codeInfo.Outports(16).Implementation.Identifier];
    
        Arg_co16 = RTW.Argument;
    Arg_co16.Type = Type_22_R0_V0;
    Arg_co16.Name = 'rty_vitm_CoolantInletTempFault';
    tmpArgs = [tmpArgs; Arg_co16];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(16)];

                  
      codeInfo.Outports(17).Implementation.Identifier = ['o_' codeInfo.Outports(17).Implementation.Identifier];
    
        Arg_co17 = RTW.Argument;
    Arg_co17.Type = Type_22_R0_V0;
    Arg_co17.Name = 'rty_vitm_CoolantOutlletTempFaul';
    tmpArgs = [tmpArgs; Arg_co17];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(17)];

                  
      codeInfo.Outports(18).Implementation.Identifier = ['o_' codeInfo.Outports(18).Implementation.Identifier];
    
        Arg_co18 = RTW.Argument;
    Arg_co18.Type = Type_21_R0_V0;
    Arg_co18.Name = 'rty_vitm_CoolantInletTFiltered';
    tmpArgs = [tmpArgs; Arg_co18];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(18)];

                  
      codeInfo.Outports(19).Implementation.Identifier = ['o_' codeInfo.Outports(19).Implementation.Identifier];
    
        Arg_co19 = RTW.Argument;
    Arg_co19.Type = Type_21_R0_V0;
    Arg_co19.Name = 'rty_vitm_CoolantOutletTFiltered';
    tmpArgs = [tmpArgs; Arg_co19];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(19)];

                  
      codeInfo.Outports(20).Implementation.Identifier = ['o_' codeInfo.Outports(20).Implementation.Identifier];
    
        Arg_co20 = RTW.Argument;
    Arg_co20.Type = Type_22_R0_V0;
    Arg_co20.Name = 'rty_vitm_HVILFault';
    tmpArgs = [tmpArgs; Arg_co20];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(20)];

                  
      codeInfo.Outports(21).Implementation.Identifier = ['o_' codeInfo.Outports(21).Implementation.Identifier];
    
        Arg_co21 = RTW.Argument;
    Arg_co21.Type = Type_17_R0_V0;
    Arg_co21.Name = 'rty_vitm_CellsTemperatureFilter';
    tmpArgs = [tmpArgs; Arg_co21];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(21)];

                  
      codeInfo.Outports(22).Implementation.Identifier = ['o_' codeInfo.Outports(22).Implementation.Identifier];
    
        Arg_co22 = RTW.Argument;
    Arg_co22.Type = Type_17_R0_V0;
    Arg_co22.Name = 'rty_vitm_CellsVoltageFiltered';
    tmpArgs = [tmpArgs; Arg_co22];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(22)];

                  
      codeInfo.Outports(23).Implementation.Identifier = ['o_' codeInfo.Outports(23).Implementation.Identifier];
    
        Arg_co23 = RTW.Argument;
    Arg_co23.Type = Type_21_R0_V0;
    Arg_co23.Name = 'rty_vitm_VehSideVoltageFiltered';
    tmpArgs = [tmpArgs; Arg_co23];

    tmpActualArgs = [tmpActualArgs; codeInfo.Outports(23)];

                    
% Opaque Data Type
type_localDW  = embedded.opaquetype('rtDW_VITM');
      

% Pointer Type: Pointer to type_localDW    
Ptrtype_localDW_0_0 = embedded.pointertype;
   Ptrtype_localDW_0_0.BaseType = type_localDW;
    Ptrtype_localDW_0_0.ReadOnly = 0;
    Ptrtype_localDW_0_0.Volatile = 0;
    
        Arg_localDW = RTW.Argument;
    Arg_localDW.Type = Ptrtype_localDW_0_0;
    Arg_localDW.Name = 'localDW';
    tmpArgs = [tmpArgs; Arg_localDW];

        
    
% Variable: Var_localDW
Var_localDW = RTW.Variable(type_localDW, 'localDW');
    Var_localDW.Owner           = '';
    Var_localDW.DeclarationFile = '';
    
    
% Data Interface: idata_localDW
idata_localDW = RTW.DataInterface('', 'localDW', Var_localDW, []);
    
    tmpActualArgs = [tmpActualArgs; idata_localDW];


                      Arg_localZCE = RTW.Argument;
    Arg_localZCE.Type = Ptrtype_localZCE_0_0;
    Arg_localZCE.Name = 'localZCE';
    tmpArgs = [tmpArgs; Arg_localZCE];

        
    tmpActualArgs = [tmpActualArgs; idata_localZCE];


  
  
  
  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
          
    
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

  
      
    

 
  
   
  
  
  
  
  
  
  
  
  
  
      
    
      OutputUpdateFcn_Prototype = RTW.CImplementation;   
  OutputUpdateFcn_Prototype.HeaderFile = ['VITM', '.h'];
    OutputUpdateFcn_Prototype.SourceFile = ['VITM', '.c'];
  
  OutputUpdateFcn_Prototype.Name = 'VITM';
  OutputUpdateFcn_Prototype.Arguments  = tmpArgs;
  OutputUpdateFcn_Prototype.Return     = tmpRet;

    
      OutputUpdateFcn_Interface = RTW.FunctionInterface;
  
  OutputUpdateFcn_Interface.Prototype    = OutputUpdateFcn_Prototype;
  OutputUpdateFcn_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdateFcn_Interface.ActualReturn = tmpActualReturn;
  
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      OutputUpdateFcn_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdateFcn_Interface'];
  

      
    

    
        
    
      
    
    
    
    


    

  


if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end

codeInfo.InternalData = [codeInfo.InternalData; idata_RTModel];
codeInfo.InternalData(end+1) = idata_localDW;
codeInfo.InternalData(end+1) = idata_localZCE;
codeInfo.InternalData(end+1) = idata_rt_errorStatus;

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

  lookupTableArray = [];         
  if exist('expInports', 'var')
      save VITM_mr_codeInfo.mat codeInfo expInports;
  else
      save VITM_mr_codeInfo.mat codeInfo;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = find(iDataVec, 'GraphicalName', iDataName);
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = [];
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    
   
