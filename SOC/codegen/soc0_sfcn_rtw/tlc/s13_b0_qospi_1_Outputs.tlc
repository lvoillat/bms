%implements s13_b0_qospi_1_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T maxV;
uint32_T bpIdx;
real_T rtb_Abs[40];
boolean_T rtb_RelationalOperator3;
int32_T i;
%closefile localVarDecl
/* Lookup_n-D: '<S11>/OCV - SOC Lookup' */
for (i = 0; i < 40; i++) {
    bpIdx = soc0_plook_evenc(rtu_cell_voltages[i], %<(SLibCGIR_PV(0, 0, 3, 151, "", -1, "", 0))>, %<(SLibCG_SE(SLibCGIR_PV(0, 0, 3, 151, "", -1, "", 1)))> - %<(SLibCG_SE(SLibCGIR_PV(0, 0, 3, 151, "", -1, "", 0)))>, 150U, &maxV);
    localB->OCVSOCLookup[i] = soc0_intrp1d_l(bpIdx, maxV, %<(SLibCGIR_PVAddr(1, 0, 3, 151, "", -1, "", 0))>);
}
/* End of Lookup_n-D: '<S11>/OCV - SOC Lookup' */

/* Abs: '<S11>/Abs' incorporates:
 *  DataStoreRead: '<S11>/Data Store Read'
 *  Sum: '<S11>/Subtract'
 */
for (i = 0; i < 40; i++) {
    rtb_Abs[i] = fabs(localB->OCVSOCLookup[i] - rtd_CCounting_soc_store[i]);
}
/* End of Abs: '<S11>/Abs' */

/* MinMax: '<S11>/max' */
maxV = rtb_Abs[0];
for (i = 0; i < 39; i++) {
    if (!((maxV >= rtb_Abs[i + 1]) || rtIsNaN(rtb_Abs[i + 1]))) {
        maxV = rtb_Abs[i + 1];
    }
}
/* RelationalOperator: '<S11>/Relational Operator3' incorporates:
 *  Constant: '<S11>/soc_diff_threshold'
 *  MinMax: '<S11>/max'
 */
rtb_RelationalOperator3 = (maxV >= 1.0);
/* Switch: '<S11>/Switch1' incorporates:
 *  Constant: '<S11>/Constant'
 *  DataStoreRead: '<S11>/Data Store Read'
 *  Switch: '<S11>/Switch'
 */
if (rtb_RelationalOperator3) {
    memcpy(&localB->Switch[0], &localB->OCVSOCLookup[0], 40U * sizeof(real_T));
    localB->Switch1 = 1.0;
} else {
    memcpy(&localB->Switch[0], &rtd_CCounting_soc_store[0], 40U * sizeof(real_T));
    localB->Switch1 = 0.0;
}
/* End of Switch: '<S11>/Switch1' */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[1].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(1, 1, 0)>
%endif
%if SLibCG_ArgAccessed(1, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(1, 1, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void soc0_Subsystem(\
%assign comma = ""
%if SLibCG_ArgAccessed(1, 1, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>const real_T rtu_cell_voltages[40]\
%assign comma = ", "
%<comma>B_Subsystem_soc0_T *localB\
%assign comma = ", "
%<comma>real_T rtd_CCounting_soc_store[40]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 1, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
