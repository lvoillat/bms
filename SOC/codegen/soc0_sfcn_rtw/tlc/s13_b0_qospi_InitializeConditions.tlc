%implements s13_b0_qospi_InitializeConditions "C"

%function InitializeConditions(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign _modelSS = ""

%<SLibInsertAsyncTaskInitializeCode(system)>
%<SLibWriteMachineInitialize()>
/* InitializeConditions for Atomic SubSystem: '<Root>/soc' */
/* InitializeConditions for Delay: '<S1>/Delay' */
memcpy(%<(SLibCG_DWVAddr(0, 0, 13, 40, "", -1, "", 0))>, %<(SLibCGIR_PVAddr(12, 0, 13, 40, "", -1, "", 0))>, 40U * sizeof(real_T));
/* InitializeConditions for Delay: '<S1>/Delay1' */
%<SLibCG_SetDWV(1, 0, 13, 1, "", -1, "", 0, "0.0")>\
/* InitializeConditions for Chart: '<S1>/Chart' */
%<SLibCG_SetDWV(8, 0, 13, 1, "", -1, "", 0, "0U")>\
%<SLibCG_SetDWV(7, 0, 13, 1, "", -1, "", 0, "soc0_IN_NO_ACTIVE_CHILD_f")>\
if (%<(SLibIsFirstInitCond())>) {
%assign   InitializeConditions_open_key_on_11_5 = ""
%openfile InitializeConditions_open_key_on_11_5

    /* InitializeConditions for Function Call SubSystem: '<S1>/key_on' */
%closefile InitializeConditions_open_key_on_11_5

%assign    InitializeConditions_body_key_on_11_5 = ""
%openfile  InitializeConditions_body_key_on_11_5

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[8], "Initialize",0)
%if SLibCG_SystemFcnArgAccessed("soc0_key_on_Init",8,0)
%<SLibCG_AccessArg(7 ,1, 0)>
%endif

%<SLibCGIRGenReusableSysCall("soc0_key_on_Init", ["%<tSimStruct>"], 8, 0, 3, 0, 3, 13)>\

%endif
%closefile InitializeConditions_body_key_on_11_5

%assign    InitializeConditions_close_key_on_11_5 = ""
%openfile  InitializeConditions_close_key_on_11_5

    /* End of InitializeConditions for SubSystem: '<S1>/key_on' */
%closefile InitializeConditions_close_key_on_11_5
%<SLibCG_DumpSSCode(InitializeConditions_open_key_on_11_5, InitializeConditions_body_key_on_11_5, InitializeConditions_close_key_on_11_5)>


%assign   InitializeConditions_open_CC_counting_11_6 = ""
%openfile InitializeConditions_open_CC_counting_11_6

    /* InitializeConditions for Function Call SubSystem: '<S1>/CC_counting' */
%closefile InitializeConditions_open_CC_counting_11_6

%assign    InitializeConditions_body_CC_counting_11_6 = ""
%openfile  InitializeConditions_body_CC_counting_11_6

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[9], "Initialize",0)
%if SLibCG_SystemFcnArgAccessed("soc0_CC_counting_Init",9,0)
%<SLibCG_AccessArg(7 ,1, 0)>
%endif

%<SLibCGIRGenReusableSysCall("soc0_CC_counting_Init", ["%<tSimStruct>"], 9, 0, 3, 0, 3, 13)>\

%endif
%closefile InitializeConditions_body_CC_counting_11_6

%assign    InitializeConditions_close_CC_counting_11_6 = ""
%openfile  InitializeConditions_close_CC_counting_11_6

    /* End of InitializeConditions for SubSystem: '<S1>/CC_counting' */
%closefile InitializeConditions_close_CC_counting_11_6
%<SLibCG_DumpSSCode(InitializeConditions_open_CC_counting_11_6, InitializeConditions_body_CC_counting_11_6, InitializeConditions_close_CC_counting_11_6)>

}
/* End of InitializeConditions for Chart: '<S1>/Chart' */

/* InitializeConditions for UnitDelay: '<S5>/UD' */
%<SLibCG_SetDWV(2, 0, 13, 1, "", -1, "", 0, "0.0")>\
/* End of InitializeConditions for SubSystem: '<Root>/soc' */
%<SLibInsertInitPeriodicCStatesFcn(system)>
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[7].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Initialize", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Initialize"))
%<SLibCG_AccessArg(7, 1, 0)>
%endif
%if SLibCG_ArgAccessed(7, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Initialize", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Initialize"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(7, 1, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void InitializeConditions(\
%assign comma = ""
%if SLibCG_ArgAccessed(7, 1, 0)
%<comma>%<tSimStructType> *%<tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(7, 1, fcnProtoType)>
%endfunction
