%implements s13_b0_qospi_Update "C"

%function Update(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
B_soc0_T *_rtB;
%closefile localVarDecl
%<SLibCG_TrackBlockIO(13)>\
_rtB = %<(SLibCG_SE(SLibGetBlockIOStructPtr()))>;
/* Update for Atomic SubSystem: '<Root>/soc' */
/* Update for Delay: '<S1>/Delay' */
memcpy(%<(SLibCG_DWVAddr(0, 0, 13, 40, "", -1, "", 0))>, &_rtB->Gain[0], 40U * sizeof(real_T));
/* Update for Delay: '<S1>/Delay1' */
%<SLibCG_SetDWV(1, 0, 13, 1, "", -1, "", 0, "_rtB->Merge1")>\
/* Update for UnitDelay: '<S5>/UD' */
%<SLibCG_SetDWV(2, 0, 13, 1, "", -1, "", 0, "_rtB->Divide1")>\
/* End of Update for SubSystem: '<Root>/soc' */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[7].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Update", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Update"))
%<SLibCG_AccessArg(7, 3, 0)>
%endif
%if SLibCG_ArgAccessed(7, 3, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Update", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Update"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(7, 3, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Update(\
%assign comma = ""
%if SLibCG_ArgAccessed(7, 3, 0)
%<comma>%<tSimStructType> *%<tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(7, 3, fcnProtoType)>
%<LibSetSystemField(system, "CachedUpdateLocalVars", localVarDecl)>
%endfunction
